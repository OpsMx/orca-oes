/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'io.spinnaker.project' version "$spinnakerGradleVersion" apply false
  id "org.jetbrains.kotlin.jvm" version "$kotlinVersion" apply false
  id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion" apply false
  id "io.gitlab.arturbosch.detekt" version "1.17.1" apply false
  id "org.jetbrains.dokka" version "1.4.32" apply false
}

allprojects {
  apply plugin: 'io.spinnaker.project'
  repositories {
    mavenLocal()
    mavenCentral()
  }

  group = "io.spinnaker.orca"

  tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
      languageVersion = JavaLanguageVersion.of(11)
    }
  }
  tasks.withType(Test).configureEach {
    javaLauncher = javaToolchains.launcherFor {
      languageVersion = JavaLanguageVersion.of(17)
    }
  }

  tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
      jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8183'
    }
  }
}

subprojects {

  if ([korkVersion, fiatVersion].any { it.endsWith("-SNAPSHOT") }) {
    logger.info("Enabling mavenLocal")
    repositories {
      mavenLocal()
      maven {
        url "https://nexus.opsmx.net/repository/maven-snapshots/"
        credentials {
          username = "NEXUS_USERNAME"
          password = "NEXUS_PASSWORD"
        }
      }
    }
  }

  if (name != "orca-bom" && name != "orca-api") {
    apply plugin: "java-library"
    apply plugin: "groovy"
    test {
      testLogging {
        exceptionFormat = 'full'
        afterSuite { desc, result ->
          if (!desc.parent) {
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            println "Report file: ${reports.html.entryPoint}"
          }
        }
      }
      useJUnitPlatform {
        includeEngines "spek2", "junit-jupiter"
      }
    }
    dependencies {
      api("redis.clients:jedis:4.3.1")
      implementation(enforcedPlatform("io.spinnaker.kork:kork-bom:$korkVersion"))
      annotationProcessor(platform("io.spinnaker.kork:kork-bom:$korkVersion"))
      testAnnotationProcessor(platform("io.spinnaker.kork:kork-bom:$korkVersion"))
      implementation("org.slf4j:slf4j-api")
      implementation("com.jakewharton.retrofit:retrofit1-okhttp3-client:1.1.0")
      implementation("net.logstash.logback:logstash-logback-encoder:4.11")
      api("org.jetbrains.spek:spek-junit-platform-engine:1.1.5")
      implementation("com.google.oauth-client:google-oauth-client:1.34.1")
      implementation("com.jcraft:jsch:0.1.55")

      testAnnotationProcessor platform("io.spinnaker.kork:kork-bom:$korkVersion")
      testAnnotationProcessor "org.projectlombok:lombok"

      testImplementation "org.springframework.boot:spring-boot-starter-test"
      testImplementation "org.spockframework:spock-core"
      testImplementation "org.spockframework:spock-spring"
      testImplementation "org.springframework:spring-test"
      testImplementation "org.hamcrest:hamcrest-core"
      testRuntimeOnly "cglib:cglib-nodep:3.3.0"
      testRuntimeOnly "org.objenesis:objenesis"
    }

    configurations.all {
      //exclude group: "javax.servlet", module: "servlet-api"
    }

    test {
      testLogging {
        exceptionFormat = "full"
      }
      useJUnitPlatform()
    }

    def licenseExtension = project.extensions.findByName('license')
    if (licenseExtension != null) {
      licenseExtension.exclude "**/*.json"
      licenseExtension.exclude "**/*.md"
      licenseExtension.exclude "**/*.yml"
      licenseExtension.mapping {
        java = "SLASHSTAR_STYLE"
        kt = "SLASHSTAR_STYLE"
      }
    }
  }
}

defaultTasks ":orca-web:run"
